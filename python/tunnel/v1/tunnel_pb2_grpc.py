# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from tunnel.v1 import tunnel_pb2 as tunnel_dot_v1_dot_tunnel__pb2


class TunnelServiceStub(object):
    """TunnelService provides bidirectional tunneling capabilities for sending raw bytes
    between client and server.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Tunnel = channel.stream_stream(
                '/tunnel.v1.TunnelService/Tunnel',
                request_serializer=tunnel_dot_v1_dot_tunnel__pb2.TunnelRequest.SerializeToString,
                response_deserializer=tunnel_dot_v1_dot_tunnel__pb2.TunnelResponse.FromString,
                _registered_method=True)


class TunnelServiceServicer(object):
    """TunnelService provides bidirectional tunneling capabilities for sending raw bytes
    between client and server.
    """

    def Tunnel(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TunnelServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Tunnel': grpc.stream_stream_rpc_method_handler(
                    servicer.Tunnel,
                    request_deserializer=tunnel_dot_v1_dot_tunnel__pb2.TunnelRequest.FromString,
                    response_serializer=tunnel_dot_v1_dot_tunnel__pb2.TunnelResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'tunnel.v1.TunnelService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('tunnel.v1.TunnelService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TunnelService(object):
    """TunnelService provides bidirectional tunneling capabilities for sending raw bytes
    between client and server.
    """

    @staticmethod
    def Tunnel(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/tunnel.v1.TunnelService/Tunnel',
            tunnel_dot_v1_dot_tunnel__pb2.TunnelRequest.SerializeToString,
            tunnel_dot_v1_dot_tunnel__pb2.TunnelResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
